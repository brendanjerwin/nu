require 'specs/spec_helper'
require 'lib/nu/api'
require 'lib/nu/lib_tools'


describe "commands specification api" do
	
	before(:all) do
		Nu::Api.set_log(lambda{|msg|})
		Nu::Api.set_out(lambda{|msg|})
    Nu::Api.load_project_settings('nilfile')
	end
	
	describe "retrieve_specification" do
		describe "from lib folder" do
			
		  it "should return a specification object if the package is installed" do
				spec = OpenStruct.new
				spec.name = 'test'

				Nu::LibTools.any_instance.stubs(:read_specs_from_lib).returns([spec])
		    Nu::Api.retrieve_specification('test').name.should eql('test')
		  end
		
			it "should return nil if the package is not installed" do
				spec = OpenStruct.new
				spec.name = 'test'
			
				Nu::LibTools.any_instance.stubs(:read_specs_from_lib).returns([spec])
			  Nu::Api.retrieve_specification('I_dont_exist').should be_nil
			end
		
			it "should return nil if there are no packages installed" do
			  Nu::LibTools.any_instance.stubs(:read_specs_from_lib).returns([])
			  Nu::Api.retrieve_specification('it_doesnt_matter').should be_nil
			end
		end
	end

	describe "retrieve_specification" do
		describe "from cache" do
			describe "without version specified" do
			  it "should return a specification object if it found one" do
					spec = OpenStruct.new
					spec.name = "foo_spec"
					Nu::GemTools.any_instance.stubs(:spec_for).returns(spec)
					Nu::Api.retrieve_specification("foo_spec", :from => :cache).should eql(spec)
			  end
		
				it "should return the highest versioned specification if it finds more than one" do
			  	#already covered in the GemTools specification
				end
			
				it "should return nil if it can't find one" do
					Nu::GemTools.any_instance.stubs(:spec_for).returns(nil)
					Nu::Api.retrieve_specification("hello?", :from => :cache).should be_nil
				end
			
			end
		end
	end

end